@Url.FrameworkJs("jquery.validate.min.js", "jquery.validate.unobtrusive.min.js")
@model  Runbow.TWS.Web.Areas.AMS.Models.QueryReplyDocumentViewModel

<!-- 新 Bootstrap 核心 CSS 文件 -->
<link rel="stylesheet" href="~/Assets/bootstrap-3.3.4-dist/bootstrap.min.css">
<script src="../../../../Scripts/System/Layer/layer.js"></script>
<link href="~/Assets/Layui/layui/css/layui.css" rel="stylesheet" />
<script src="~/Assets/Layui/layui/layui.js"></script>

@using (Html.BeginForm())
{
    @Html.HiddenFor(m => m.SearchCondition.StatUpLoadTime)
    @Html.HiddenFor(m => m.SearchCondition.EndUpLoadTime)
    @Html.HiddenFor(m => m.PageIndex)
    <fieldset>
        <legend>查询条件</legend>
        <table>
            <tr>
                <td class="TableColumnTitle">客户名称</td>
                <td>
                    @Html.DropDownListFor(m => m.SearchCondition.CustomerID, Model.Customers, "==请选择==")
                </td>
                <td class="TableColumnTitle">运单状态</td>
                <td>
                    <select style="width:150px">
                        <option>已出库</option>
                        <option>待分配</option>
                        <option>待下单</option>
                        <option selected="selected">运输中</option>
                        <option>已签收</option>
                    </select>
                </td>
                <td class="TableColumnTitle">发货日期</td>
                <td>
                    @Html.CalendarRange("UpLoadTime", "calendarRange")
                </td>
            </tr>
            <tr>
                <td class="TableColumnTitle">运单号</td>
                <td>
                    @Html.TextAreaFor(m => m.SearchCondition.Numbers, new { style = "width:95%" })
                </td>
            </tr>
        </table>
        <div class="actionButtonDiv">
            <input type="submit" value="查询" id="btnSave" />
            <input type="button" value="导出" id="btnFP" />
        </div>
    </fieldset>
}
<fieldset>
    <legend>
        运单列表
        @if (Model.AMSUploadCollection != null && Model.AMSUploadCollection.Any())
        {
            @Html.Raw("(" + Model.AMSUploadCollection.Count() + ")");
        }
    </legend>
    <table id="resultTable">
        <thead>
            <tr>
                <th class="TableColumnTitle">运单号</th>
                <th class="TableColumnTitle">发货日期</th>
                <th class="TableColumnTitle">承运商</th>
                <th class="TableColumnTitle">起运城市</th>
                <th class="TableColumnTitle">目的城市</th>
                <th class="TableColumnTitle">运单状态</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style="cursor:pointer" class="TrackInfo">600674301</td>
                <td>2021-02-20</td>
                <td>顺丰快递</td>
                <td>上海</td>
                <td>北京</td>
                <td>运输中</td>
            </tr>
            @*@if (Model.AMSUploadCollection != null && Model.AMSUploadCollection.Any())
                {
                    foreach (var ams in Model.AMSUploadCollection)
                    {
                        <tr>
                            <td>
                                <a class="attachmentClass" href="../GetAttachment/@ams.ID" data-id="@ams.ID">@ams.FileName</a>
                            </td>
                            <td>
                                @ams.FileType
                            </td>
                            <td>
                                @ams.Creator
                            </td>
                            <td>
                                @ams.CreateTime
                            </td>
                            @if (ams.Status.ToString() == "True")
                            {
                                <td>已验证</td>
                            }
                            else
                            {
                                <td>未验证</td>
                            }

                            @if (Model.Type == 2)
                            {
                                <td>
                                    @ams.OrderNo
                                </td>
                            }
                        </tr>
                    }
                }*@
        </tbody>
    </table>
    @Html.Pager(Model.PageIndex, Model.PageCount, "")
</fieldset>

<div class="body-nest" id="DivShipperType2" style="overflow-x:auto;display:none">
    <section>
        <div class="table-responsive">
            <img src="~/Image/trackinfo.png" width="600"  height="400" />
        </div>
    </section>
</div>

<script>
    layui.config({
        base: '../../../Assets/Layui/layui_exts/',
    }).extend({
        excel: 'excel',
    });
    layui.use(['form', 'layer', 'excel'], function () {
        var form = layui.form,
            layer = parent.layer === undefined ? layui.layer : top.layer,
            $ = layui.jquery,
            excel = layui.excel;

        jQuery.support.cors = true;

        var timestart;//计算开始用时
        var timeend;//计算结束用时
        var loading;//弹出层下标，用来关闭提示框



        $(".TrackInfo").live('click', function () {
            var index = null;
            index = layer.open({
                type: 1,
                title: "跟踪信息",
                area: ["650px", "400px"],
                maxmin: false,
                offset: 'auto',
                content: $('#DivShipperType2') //这里content是一个DOM
            });

        })
        //递归调用后台获取数组拼接
        //times:递归次数
        //limit:分段获取行数
        //arrs：拼接的数组
        function getData(times, limit, arrs) {
            console.log("次数：" + times);
            var searchData = {
                StorerID: $("#ProductSKU_StorerID option:selected").val(),
                SKUClassification: $("#ProductSKU_SKUClassification option:selected").val(),
                SKU: $("#ProductSKU_SKU").val(),
                UPC: $("#ProductSKU_UPC").val(),
                Article: $("#ProductSKU_Article").val(),
                Size: $("#ProductSKU_Size").val(),
                Remark: $("#ProductSKU_Remark").val()
            };
            $.ajax({
                url: '/WMS/Product/GetSKUProductInfo',
                type: 'POST',
                data: {
                    requestData: JSON.stringify(searchData),
                    page: times,
                    limit: limit
                },
                dataType: 'json',
                success: function (res) {
                    var data = res.data;
                    arrs.push.apply(arrs, data);
                    console.log("行数:" + arrs.length);
                    if (res.count > limit && times > 1) {
                        getData(times - 1, limit, arrs);
                    } else {
                        callback(arrs);
                    }
                }, error: function (res) {
                    console.log(res);
                    layer.close(loading);
                    layer.alert('获取数据失败');
                }
            });
        }

        //导出EXCEL数组数据
        function callback(arrs) {
            console.log("数组长度：" + arrs.length);
            timeend = Date.now();
            var spent = (timeend - timestart) / 1000;
            console.log('获取数据耗时 ' + spent + ' s');
            timestart = Date.now();
            data = excel.filterExportData(arrs, {
                CustomerName: 'CustomerName',
                SKU: 'SKU',
                GoodsName: 'GoodsName',
                UPC: 'UPC',
                Category: 'Str10',
                Size: 'Str9',
                Volume: 'Volume',
                EffectDay: 'Int1',
                EffectMonth: 'Int1',
                Weight: 'Weight',
                Price: 'Str2',
                SafetyClasp: 'Str3',
                Jacket: 'Str4',
                Division: 'Division',
                GenderAge: 'GenderAge',
                Hanger: 'Hanger',
                SilHouette: 'SilHouette',
                CategoryText: 'CategoryText',
                GlblCatSumCode: 'GlblCatSumCode',
                GlblCatSum: 'GlblCatSum',
                SeasonCode: 'SeasonCode',
                seasonYear: 'seasonYear',
                CategoryCode: 'CategoryCode',
                SubCategoryCode: 'SubCategoryCode'
            });
            // 重点2！！！一般都需要加一个表头，表头的键名顺序需要与最终导出的数据一致
            data.unshift({
                CustomerName: '客户',
                SKU: 'SKU',
                GoodsName: '货品名称',
                UPC: 'UPC',
                Category: '品名类别',
                Size: '货品尺寸',
                Volume: '体积',
                EffectDay: '有效期(日)',
                EffectMonth: '有效期(月)',
                Weight: '重量(kg)',
                Price: '价格',
                SafetyClasp: '安全扣',
                Jacket: '羽绒服',
                Division: 'BU',
                GenderAge: 'GenderAge',
                Hanger: 'Hanger',
                SilHouette: 'SilHouette',
                CategoryText: 'CategoryText',
                GlblCatSumCode: 'GlblCatSumCode',
                GlblCatSum: 'GlblCatSum',
                SeasonCode: 'SeasonCode',
                seasonYear: 'seasonYear',
                CategoryCode: 'CategoryCode',
                SubCategoryCode: 'SubCategoryCode'
            });
            //设置样式的函数，传入设置的范围，表头样式
            excel.setExportCellStyle(data, 'A1:X1', {
                s: {
                    fill: { bgColor: { indexed: 64 }, fgColor: { rgb: "F3F3F3" } },
                    alignment: {
                        horizontal: 'center',
                        vertical: 'center'
                    },
                    font: { sz: 12, bold: true }
                }
            });
            //设置样式的函数，传入设置的范围，单元格边框样式
            excel.setExportCellStyle(data, 'A1:X' + data.length, {
                s: {
                    border: {
                        top: {
                            style: 'thin', color: { rgb: "000000" }
                        }, bottom: {
                            style: 'thin', color: { rgb: "000000" }
                        }, left: {
                            style: 'thin', color: { rgb: "000000" }
                        }, right: {
                            style: 'thin', color: { rgb: "000000" }
                        }
                    }
                }
            });
            // 意思是：A列100px，B/C列120px，M列150px，其他列80px
            var colConf = excel.makeColConfig({
                'A': 100,
                'B': 120,
                'C': 120,
                'X': 150
            }, 80);
            excel.exportExcel({
                sheet1: data
            }, 'SKU信息导出' + getCurrentTimeStr() + '.xlsx', 'xlsx', {
                    extend: {
                        '!cols': colConf
                    }
                });
            timeend = Date.now();
            spent = (timeend - timestart) / 1000;
            console.log('导出耗时 ' + spent + ' s');
            layer.close(loading);
        }

        //获取当前日期字符串
        function getCurrentTimeStr() {
            var isTime = new Date();
            var y = isTime.getFullYear();
            var m = isTime.getMonth();
            var d = isTime.getDate();
            var h = isTime.getHours();
            var mi = isTime.getMinutes();
            var s = isTime.getSeconds();
            m = m + 1;
            var str = "";
            str += y;
            str += (m + "").length < 2 ? ("0" + m) : m;
            str += (d + "").length < 2 ? ("0" + d) : d;
            str += (h + "").length < 2 ? ("0" + h) : h;
            str += (mi + "").length < 2 ? ("0" + mi) : mi;
            str += (s + "").length < 2 ? ("0" + s) : s;
            return str;
        }
    })

</script>